<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:ui="clr-namespace:System.Windows.Documents;assembly=PresentationUI"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib">
  <Style x:Key="ComboBoxFocusVisual">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Rectangle Margin="4,4,21,4"
                     StrokeThickness="1"
                     Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                     StrokeDashArray="1 2"
                     SnapsToDevicePixels="true"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="ComboBoxEditableTextBox"
         TargetType="{x:Type TextBox}">
    <Setter Property="OverridesDefaultStyle"
            Value="true"/>
    <Setter Property="AllowDrop"
            Value="true"/>
    <Setter Property="MinWidth"
            Value="0"/>
    <Setter Property="MinHeight"
            Value="0"/>
    <Setter Property="FocusVisualStyle"
            Value="{x:Null}"/>
    <Setter Property="ScrollViewer.PanningMode"
            Value="VerticalFirst"/>
    <Setter Property="Stylus.IsFlicksEnabled"
            Value="False"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TextBox}">
          <ScrollViewer x:Name="PART_ContentHost"
                        Focusable="false"
                        HorizontalScrollBarVisibility="Hidden"
                        VerticalScrollBarVisibility="Hidden"
                        Background="Transparent"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>



  <SolidColorBrush x:Key="ToolBarToggleButtonVerticalBackground" Color="#FFEEF5FD"/>


  <Geometry x:Key="ToolBarCheckmark">M 0,2.5 L 2.5,5 L 7,0.5</Geometry>

  <Style x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
    <Setter Property="OverridesDefaultStyle" Value="true"/>
    <Setter Property="IsTabStop" Value="false"/>
    <Setter Property="Focusable" Value="false"/>
    <Setter Property="ClickMode" Value="Press"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Border x:Name="templateRoot"
              SnapsToDevicePixels="true"
              BorderThickness="{TemplateBinding BorderThickness}"
              BorderBrush="{DynamicResource ComboBox.Static.Border}"
              Background="{DynamicResource ComboBox.Static.Background}">
            <Border x:Name="splitBorder"
                SnapsToDevicePixels="true"
                HorizontalAlignment="Right"
                Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"
                BorderThickness="1"
                BorderBrush="Transparent"
                Margin="0">
              <Path x:Name="arrow"
                  HorizontalAlignment="Center"
                  VerticalAlignment="Center"
                  Fill="{DynamicResource ComboBox.Static.Glyph}"
                  Data="M0,0 L8,0 L4,4 z"
                  Margin="0"/>
            </Border>
          </Border>
          <ControlTemplate.Triggers>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=IsEditable,RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                <Condition Binding="{Binding Path=IsMouseOver,RelativeSource={RelativeSource Self}}" Value="false"/>
                <Condition Binding="{Binding Path=IsPressed,RelativeSource={RelativeSource Self}}" Value="false"/>
                <Condition Binding="{Binding Path=IsEnabled,RelativeSource={RelativeSource Self}}" Value="true"/>
              </MultiDataTrigger.Conditions>
              <Setter TargetName="templateRoot" Property="Background" Value="{DynamicResource ComboBox.Static.Editable.Background}" />
              <Setter TargetName="templateRoot" Property="BorderBrush" Value="{DynamicResource ComboBox.Static.Editable.Border}" />
              <Setter TargetName="splitBorder" Property="Background" Value="{DynamicResource ComboBox.Static.Editable.Button.Background}" />
              <Setter TargetName="splitBorder" Property="BorderBrush" Value="{DynamicResource ComboBox.Static.Editable.Button.Border}" />
            </MultiDataTrigger>
            <Trigger Property="IsMouseOver" Value="true">
              <Setter TargetName="arrow" Property="Fill" Value="{DynamicResource ComboBox.MouseOver.Glyph}" />
            </Trigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=IsMouseOver,RelativeSource={RelativeSource Self}}" Value="true"/>
                <Condition Binding="{Binding Path=IsEditable,RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
              </MultiDataTrigger.Conditions>
              <Setter TargetName="templateRoot" Property="Background" Value="{DynamicResource ComboBox.MouseOver.Background}" />
              <Setter TargetName="templateRoot" Property="BorderBrush" Value="{DynamicResource ComboBox.MouseOver.Border}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=IsMouseOver,RelativeSource={RelativeSource Self}}" Value="true"/>
                <Condition Binding="{Binding Path=IsEditable,RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
              </MultiDataTrigger.Conditions>
              <Setter TargetName="templateRoot" Property="Background" Value="{DynamicResource ComboBox.MouseOver.Editable.Background}" />
              <Setter TargetName="templateRoot" Property="BorderBrush" Value="{DynamicResource ComboBox.MouseOver.Editable.Border}" />
              <Setter TargetName="splitBorder" Property="Background" Value="{DynamicResource ComboBox.MouseOver.Editable.Button.Background}" />
              <Setter TargetName="splitBorder" Property="BorderBrush" Value="{DynamicResource ComboBox.MouseOver.Editable.Button.Border}" />
            </MultiDataTrigger>
            <Trigger Property="IsPressed" Value="true">
              <Setter TargetName="arrow" Property="Fill" Value="{DynamicResource ComboBox.Pressed.Glyph}" />
            </Trigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=IsPressed,RelativeSource={RelativeSource Self}}" Value="true"/>
                <Condition Binding="{Binding Path=IsEditable,RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
              </MultiDataTrigger.Conditions>
              <Setter TargetName="templateRoot" Property="Background" Value="{DynamicResource ComboBox.Pressed.Background}" />
              <Setter TargetName="templateRoot" Property="BorderBrush" Value="{DynamicResource ComboBox.Pressed.Border}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=IsPressed,RelativeSource={RelativeSource Self}}" Value="true"/>
                <Condition Binding="{Binding Path=IsEditable,RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
              </MultiDataTrigger.Conditions>
              <Setter TargetName="templateRoot" Property="Background" Value="{DynamicResource ComboBox.Pressed.Editable.Background}" />
              <Setter TargetName="templateRoot" Property="BorderBrush" Value="{DynamicResource ComboBox.Pressed.Editable.Border}" />
              <Setter TargetName="splitBorder" Property="Background" Value="{DynamicResource ComboBox.Pressed.Editable.Button.Background}" />
              <Setter TargetName="splitBorder" Property="BorderBrush" Value="{DynamicResource ComboBox.Pressed.Editable.Button.Border}" />
            </MultiDataTrigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter TargetName="arrow" Property="Fill" Value="{DynamicResource ComboBox.Disabled.Glyph}" />
            </Trigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=IsEnabled,RelativeSource={RelativeSource Self}}" Value="false"/>
                <Condition Binding="{Binding Path=IsEditable,RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
              </MultiDataTrigger.Conditions>
              <Setter TargetName="templateRoot" Property="Background" Value="{DynamicResource ComboBox.Disabled.Background}" />
              <Setter TargetName="templateRoot" Property="BorderBrush" Value="{DynamicResource ComboBox.Disabled.Border}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=IsEnabled,RelativeSource={RelativeSource Self}}" Value="false"/>
                <Condition Binding="{Binding Path=IsEditable,RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
              </MultiDataTrigger.Conditions>
              <Setter TargetName="templateRoot" Property="Background" Value="{DynamicResource ComboBox.Disabled.Editable.Background}" />
              <Setter TargetName="templateRoot" Property="BorderBrush" Value="{DynamicResource ComboBox.Disabled.Editable.Border}" />
              <Setter TargetName="splitBorder" Property="Background" Value="{DynamicResource ComboBox.Disabled.Editable.Button.Background}" />
              <Setter TargetName="splitBorder" Property="BorderBrush" Value="{DynamicResource ComboBox.Disabled.Editable.Button.Border}" />
            </MultiDataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>


  <ControlTemplate x:Key="ComboBoxEditableTemplate" TargetType="{x:Type ComboBox}">
    <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="*"/>
        <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
      </Grid.ColumnDefinitions>
      <Popup x:Name="PART_Popup"
          AllowsTransparency="true"
          Placement="Bottom"
          Grid.ColumnSpan="2"
          IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
          PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
        <Border x:Name="dropDownBorder"
            BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}"
            Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"
            BorderThickness="1"
            MaxHeight="{TemplateBinding MaxDropDownHeight}"
            MinWidth="{Binding ActualWidth, ElementName=templateRoot}">
          <ScrollViewer x:Name="DropDownScrollViewer">
            <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
              <Canvas x:Name="canvas"
                  HorizontalAlignment="Left"
                  VerticalAlignment="Top"
                  Height="0"
                  Width="0">
                <Rectangle x:Name="opaqueRect"
                    Fill="{Binding Background, ElementName=dropDownBorder}"
                    Height="{Binding ActualHeight, ElementName=dropDownBorder}"
                    Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
              </Canvas>
              <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
            </Grid>
          </ScrollViewer>
        </Border>
      </Popup>
      <ToggleButton x:Name="toggleButton"
          BorderBrush="{TemplateBinding BorderBrush}"
          Background="{TemplateBinding Background}"
          BorderThickness="{TemplateBinding BorderThickness}"
          IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
          Style="{DynamicResource ComboBoxToggleButton}"
          Grid.ColumnSpan="2"/>
      <Border x:Name="border"
          Margin="{TemplateBinding BorderThickness}"
          Background="{DynamicResource TextBox.Static.Background}">
        <TextBox x:Name="PART_EditableTextBox"
            Style="{DynamicResource ComboBoxEditableTextBox}"
            IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"
            Margin="{TemplateBinding Padding}"
            HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
            VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
      </Border>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsEnabled" Value="false">
        <Setter TargetName="border" Property="Opacity" Value="0.56"/>
      </Trigger>
      <Trigger Property="IsKeyboardFocusWithin" Value="true">
        <Setter Property="Foreground" Value="Black"/>
      </Trigger>
      <Trigger Property="HasItems" Value="false">
        <Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
      </Trigger>
      <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
        <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
        <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <ControlTemplate x:Key="ComboBoxTemplate" TargetType="{x:Type ComboBox}">
    <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="*"/>
        <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
      </Grid.ColumnDefinitions>
      <Popup x:Name="PART_Popup"
          AllowsTransparency="true"
          Margin="1"
          Placement="Bottom"
          Grid.ColumnSpan="2"
          IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
          PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
        <Border x:Name="dropDownBorder"
            BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}"
            Background="{DynamicResource ComboBox.Drop.Background}"
            BorderThickness="1"
            MaxHeight="{TemplateBinding MaxDropDownHeight}"
            MinWidth="{Binding ActualWidth, ElementName=templateRoot}">
          <ScrollViewer x:Name="DropDownScrollViewer">
            <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
              <Canvas x:Name="canvas"
                  HorizontalAlignment="Left"
                  VerticalAlignment="Top"
                  Height="0"
                  Width="0">
                <Rectangle x:Name="opaqueRect"
                    Fill="{Binding Background, ElementName=dropDownBorder}"
                    Height="{Binding ActualHeight, ElementName=dropDownBorder}"
                    Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
              </Canvas>
              <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
            </Grid>
          </ScrollViewer>
        </Border>
      </Popup>
      <ToggleButton x:Name="toggleButton"
          BorderBrush="{TemplateBinding BorderBrush}"
          Background="{TemplateBinding Background}"
          BorderThickness="{TemplateBinding BorderThickness}"
          IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
          Style="{DynamicResource ComboBoxToggleButton}"
          Grid.ColumnSpan="2" />
      <ContentPresenter x:Name="contentPresenter"
          Content="{TemplateBinding SelectionBoxItem}"
          ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
          ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
          ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
          IsHitTestVisible="false"
          Margin="{TemplateBinding Padding}"
          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="HasItems" Value="false">
        <Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
      </Trigger>
      <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
        <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
        <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <Style TargetType="{x:Type ComboBox}">
    <Setter Property="FocusVisualStyle" Value="{DynamicResource FocusVisual}"/>
    <Setter Property="Background" Value="{DynamicResource ComboBox.Static.Background}" />
    <Setter Property="BorderBrush" Value="{DynamicResource ComboBox.Static.Border}" />
    <Setter Property="Foreground" Value="{DynamicResource Brush.WindowForeground}"/>
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
    <Setter Property="Padding" Value="6,3,5,3"/>
    <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
    <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
    <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
    <Setter Property="Template" Value="{DynamicResource ComboBoxTemplate}" />
    <Style.Triggers>
      <Trigger Property="IsEditable" Value="true">
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Padding" Value="2"/>
        <Setter Property="Template" Value="{DynamicResource ComboBoxEditableTemplate}"/>
      </Trigger>
    </Style.Triggers>
  </Style>


  <Style TargetType="{x:Type ComboBoxItem}">
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="Padding" Value="4,1" />
    <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
    <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="FocusVisualStyle" Value="{DynamicResource FocusVisual}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ComboBoxItem}">
          <Border x:Name="Bd"
              BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}"
              Background="{TemplateBinding Background}"
              Padding="{TemplateBinding Padding}"
              SnapsToDevicePixels="true">
            <ContentPresenter
                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="Bd" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsSelected" Value="False" />
                <Condition Property="IsMouseOver" Value="True" />
                <Condition Property="UIElement.IsKeyboardFocused" Value="False" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Bd" Property="Background" Value="{DynamicResource ComboBoxItem.ItemsviewHover.Background}" />
              <Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource ComboBoxItem.ItemsviewHover.Border}" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsSelected" Value="True" />
                <Condition Property="IsMouseOver" Value="False" />
                <Condition Property="UIElement.IsKeyboardFocused" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Bd" Property="Background" Value="{DynamicResource ComboBoxItem.ItemsviewSelected.Background}" />
              <Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource ComboBoxItem.ItemsviewSelected.Border}" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsSelected" Value="True" />
                <Condition Property="IsMouseOver" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Bd" Property="Background" Value="{DynamicResource ComboBoxItem.ItemsviewSelectedHover.Background}" />
              <Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource ComboBoxItem.ItemsviewSelectedHover.Border}" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsSelected" Value="True" />
                <Condition Property="IsMouseOver" Value="False" />
                <Condition Property="UIElement.IsKeyboardFocused" Value="False" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Bd" Property="Background" Value="{DynamicResource ComboBoxItem.ItemsviewSelectedNoFocus.Background}" />
              <Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource ComboBoxItem.ItemsviewSelectedNoFocus.Border}" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsSelected" Value="False" />
                <Condition Property="IsMouseOver" Value="False" />
                <Condition Property="UIElement.IsKeyboardFocused" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource ComboBoxItem.ItemsviewFocus.Border}" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsSelected" Value="False" />
                <Condition Property="IsMouseOver" Value="True" />
                <Condition Property="UIElement.IsKeyboardFocused" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Bd" Property="Background" Value="{DynamicResource ComboBoxItem.ItemsviewHoverFocus.Background}" />
              <Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource ComboBoxItem.ItemsviewHoverFocus.Border}" />
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
</ResourceDictionary>